/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

using System;
using System.IO;

namespace QuantConnect.Data.UniverseSelection
{
    /// <summary>
    /// Custom data class used for fetching pre selected symbols
    /// </summary>
    public class PreSelected : BaseData
    {
        private const string LiveBaseUrl = @"https://www.quantconnect.com/api/v2/live/data/";

        /// <summary>
        /// The end time of this data.
        /// </summary>
        public override DateTime EndTime
        {
            get { return Time + QuantConnect.Time.OneDay; }
            set { Time = value - QuantConnect.Time.OneDay; }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoarseFundamental"/> class
        /// </summary>
        public PreSelected()
        {
            DataType = MarketDataType.Auxiliary;
        }

        /// <summary>
        /// Return the URL string source of the file. This will be converted to a stream
        /// </summary>
        /// <param name="config">Configuration object</param>
        /// <param name="date">Date of this source file</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>String URL of source file.</returns>
        public override SubscriptionDataSource GetSource(SubscriptionDataConfig config, DateTime date, bool isLiveMode)
        {
            var universe = config.MappedSymbol.Substring(config.MappedSymbol.LastIndexOf('-') + 1).ToLower();
            if (!isLiveMode)
            {
                var path = Path.Combine(Globals.DataFolder,
                    config.SecurityType.SecurityTypeToLower(),
                    config.Market,
                    "universes",
                    universe,
                    $"{date:yyyyMMdd}.csv");
                return new SubscriptionDataSource(path, SubscriptionTransportMedium.LocalFile, FileFormat.Csv);
            }
            else
            {
                // example https://www.quantconnect.com/api/v2/live/data/equity-usa-universes-qc500-20180601.csv
                var url = $"{LiveBaseUrl}{config.SecurityType.SecurityTypeToLower()}-{config.Market}-universes-{universe}-{date:yyyyMMdd}.csv";
                return new SubscriptionDataSource(url, SubscriptionTransportMedium.RemoteFile);
            }
        }

        /// <summary>
        /// Reader converts each line of the data source into BaseData objects. Each data type creates its own factory method, and returns a new instance of the object
        /// each time it is called.
        /// </summary>
        /// <param name="config">Subscription data config setup object</param>
        /// <param name="line">Line of the source document</param>
        /// <param name="date">Date of the requested data</param>
        /// <param name="isLiveMode">true if we're in live mode, false for backtesting mode</param>
        /// <returns>Instance of the T:BaseData object generated by this line of the CSV</returns>
        public override BaseData Reader(SubscriptionDataConfig config, string line, DateTime date, bool isLiveMode)
        {
            try
            {
                var securityIdentifier = SecurityIdentifier.Parse(line);
                var preSelected = new PreSelected
                {
                    Symbol = new Symbol(securityIdentifier, securityIdentifier.Symbol),
                    Time = date
                };

                return preSelected;
            }
            catch (Exception)
            {
                return null;
            }
        }
    }
}
